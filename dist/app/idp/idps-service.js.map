{"version":3,"file":"idps-service.js","sourceRoot":"","sources":["../../home/mika/workspace/fediz-idp-webui/angular2-fedizidpui-cli/fediz-idp-ui/tmp/broccoli_type_script_compiler-input_base_path-G98MuYh6.tmp/0/src/app/idp/idps-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { HttpClient } from './../shared/http-client';\nimport { Observable } from 'rxjs/Observable';\nimport { IDP } from './idp';\nimport { Consts } from './../shared/consts';\nimport 'rxjs/Rx';\n \nlet entries = [],\n    baseURL: string = Consts.URL_PREFIX,\n    urlIdentifier: string = \"idps\",\n    IdpsURL: string = baseURL + urlIdentifier + '?size=' + Consts.LISTSIZE,\n    claimMappingSuffix: string = \"/claims\",\n    applicationMappingSuffix: string = \"/applications\",\n    trustedIdpsMappingSuffix: string = \"/trusted-idps\",\n    idpURL: string = baseURL + urlIdentifier + '/';    \n\n \n@Injectable()\nexport class IDPsService {\n   private httpClient : HttpClient;\n\n    constructor(httpClient: HttpClient) {\n        this.httpClient = httpClient;\n    }\n \n    removeTrustedIdpMapping(entry: IDP, claimType: string) {        \n        return this.httpClient.delete(idpURL + entry.realm + trustedIdpsMappingSuffix + \"/\" + claimType, {})\n            .map((res: any) => res.json())\n            .catch(this.handlePlaceboError);            \n    }\n\n    addTrustedIdpMapping(entry: IDP, trustedIdpRealm: string) {\n        var obj = {};\n        obj[\"realm\"] = trustedIdpRealm;\n\n        return this.httpClient.post(idpURL + entry.realm + trustedIdpsMappingSuffix, obj)            \n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n\n    removeClaimMapping(entry: IDP, claimType: string) {        \n        return this.httpClient.delete(idpURL + entry.realm + claimMappingSuffix + \"/\" + claimType, {})\n            .map((res: any) => res.json())\n            .catch(this.handlePlaceboError);            \n    }\n\n    addClaimMapping(entry: IDP, claimType: string, isOptional: boolean) {\n        var claim = {};\n        claim[\"claimType\"] = claimType;\n\n        return this.httpClient.post(idpURL + entry.realm + claimMappingSuffix, claim)            \n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    removeApplicationMapping(entry: IDP, claimType: string) {        \n        return this.httpClient.delete(idpURL + entry.realm + applicationMappingSuffix + \"/\" + claimType, {})\n            .map((res: any) => res.json())\n            .catch(this.handlePlaceboError);            \n    }\n\n    addApplicationMapping(entry: IDP, applicationRealm: string) {\n        var obj = {};\n        obj[\"realm\"] = applicationRealm;\n\n        return this.httpClient.post(idpURL + entry.realm + applicationMappingSuffix, obj)            \n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    findAll() {\n        return this.httpClient.get(IdpsURL)\n            .map((res: any) => res.json())\n            .catch(this.handleError);\n    }\n\n    find(id: string) {\n        return this.httpClient.get(idpURL + id)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    persist(idp: IDP) {\n        return this.httpClient.put(idpURL + idp.realm, idp)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    create(idp: IDP) {\n        return this.httpClient.post(idpURL, idp)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    remove (idp: IDP) {\n         return this.httpClient.delete(idpURL + idp.realm, idp)\n            .map((res: any) => res.json())\n            .catch(this.handlePlaceboError);                               \n    }\n \n\n    // Fediz IDP returns 204 for DELETE Requests..\n    handlePlaceboError(error) {      \n    }\n\n    handleError(error) {        \n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    } \n}"]}