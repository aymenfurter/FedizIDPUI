{"version":3,"file":"trustedIdps-service.js","sourceRoot":"","sources":["../../home/mika/workspace/fediz-idp-webui/angular2-fedizidpui-cli/fediz-idp-ui/tmp/broccoli_type_script_compiler-input_base_path-o2t0YTLc.tmp/0/src/app/trustedIdp/trustedIdps-service.ts"],"names":[],"mappings":";;;;;;;;;;AACA,qBAA2B,eAAe,CAAC,CAAA;AAE3C,4BAA2B,yBAAyB,CAAC,CAAA;AACrD,2BAA2B,iBAAiB,CAAC,CAAA;AAE7C,uBAAuB,oBAAoB,CAAC,CAAA;AAC5C,QAAO,SAAS,CAAC,CAAA;AAEjB,IAAI,OAAO,GAAG,EAAE,EACZ,OAAO,GAAW,eAAM,CAAC,UAAU,EACnC,aAAa,GAAW,cAAc,EACtC,cAAc,GAAW,OAAO,GAAG,aAAa,GAAG,QAAQ,GAAG,eAAM,CAAC,QAAQ,EAC7E,aAAa,GAAW,OAAO,GAAG,aAAa,GAAG,GAAG,CAAC;AAG1D;IAGI,4BAAY,UAAsB;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IACjC,CAAC;IAED,oCAAO,GAAP;QACI,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,cAAc,CAAC;aACrC,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,iCAAI,GAAJ,UAAK,EAAU;QACX,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,GAAG,EAAE,CAAC;aACzC,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,oCAAO,GAAP,UAAQ,UAAsB;QAC1B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,aAAa,GAAG,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC;aACnE,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,mCAAM,GAAN,UAAO,UAAsB;QACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,aAAa,EAAE,UAAU,CAAC;aACjD,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAED,mCAAM,GAAN,UAAQ,UAAsB;QACzB,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,aAAa,GAAG,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC;aACvE,GAAG,CAAC,UAAC,GAAQ,IAAK,OAAA,GAAG,CAAC,IAAI,EAAE,EAAV,CAAU,CAAC;aAC7B,KAAK,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;IACxC,CAAC;IAGD,8CAA8C;IAC9C,+CAAkB,GAAlB,UAAmB,KAAK;IACxB,CAAC;IAED,wCAAW,GAAX,UAAY,KAAK;QACb,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACrB,MAAM,CAAC,uBAAU,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,KAAK,IAAI,cAAc,CAAC,CAAC;IAClE,CAAC;IA9CL;QAAC,iBAAU,EAAE;;0BAAA;IA+Cb,yBAAC;AAAD,CAAC,AA9CD,IA8CC;AA9CY,0BAAkB,qBA8C9B,CAAA","sourcesContent":["import { Component } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Http, Headers, RequestOptions } from '@angular/http';\nimport { HttpClient } from './../shared/http-client';\nimport { Observable } from 'rxjs/Observable';\nimport { TrustedIdp } from './trustedIdp';\nimport { Consts } from './../shared/consts';\nimport 'rxjs/Rx';\n \nlet entries = [],\n    baseURL: string = Consts.URL_PREFIX,\n    urlIdentifier: string = \"trusted-idps\",\n    trustedIdpsURL: string = baseURL + urlIdentifier + '?size=' + Consts.LISTSIZE,\n    trustedIdpURL: string = baseURL + urlIdentifier + '/';    \n \n@Injectable()\nexport class TrustedIdpsService {\n   private httpClient : HttpClient;\n\n    constructor(httpClient: HttpClient) {\n        this.httpClient = httpClient;\n    }\n \n    findAll() {\n        return this.httpClient.get(trustedIdpsURL)\n            .map((res: any) => res.json())\n            .catch(this.handleError);\n    }\n\n    find(id: string) {\n        return this.httpClient.get(trustedIdpURL + id)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    persist(trustedIdp: TrustedIdp) {\n        return this.httpClient.put(trustedIdpURL + trustedIdp.realm, trustedIdp)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    create(trustedIdp: TrustedIdp) {\n        return this.httpClient.post(trustedIdpURL, trustedIdp)\n            .map((res: any) => res.json())\n            .catch(this.handleError);            \n    }\n\n    remove (trustedIdp: TrustedIdp) {\n         return this.httpClient.delete(trustedIdpURL + trustedIdp.realm, trustedIdp)\n            .map((res: any) => res.json())\n            .catch(this.handlePlaceboError);                               \n    }\n \n\n    // Fediz IDP returns 204 for DELETE Requests..\n    handlePlaceboError(error) {      \n    }\n\n    handleError(error) {        \n        console.error(error);\n        return Observable.throw(error.json().error || 'Server error');\n    } \n}"]}